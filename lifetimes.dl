/*
Created by Robert Jacobson on 16 June 2019.

Lifetime Inference
Description: An implementation of lifetime inference for the Rust programming
             language.

Copyright (c) 2019 Robert Jacobson.        
The MIT License

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to
deal in the Software without restriction, including without limitation the
rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
sell copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
IN THE SOFTWARE.
*/


// souffle -D. lifetimes.dl
// souffle -D. -explain lifetimes.dl
//       explain error("result", "longest", "L17")

/*
ToDo: 
1. Make a distinction between mutable and immutable borrows. 
2. Better examples of multiple mutable borrows.
3. Is it easy to hook this into a Rust parser? If so, do it.
4. Generate inferred lifetimes.
5. Allow a (mutable) borrow if the previous (immutable) borrow will
   no longer be used.
*/

.symbol_type reference
.symbol_type loan
.type referrer = loan | reference
.symbol_type point
.comp DiGraph {
    .decl point(a:point)
    .decl edge(a:point,b:point)

    point(X) :- edge(X,_).
    point(X) :- edge(_,X).

    // Unused:
    // .decl reach(a:point,b:point)
    // reach(X,X) :- point(X).
    // reach(X,Y) :- edge(X,Y).
    // reach(X,Z) :- reach(X,Y),reach(Y,Z).

    // Unused:
    // .decl clique(a:point,b:point)
    // clique(X,Y) :- reach(X,Y),reach(Y,X).
}

// ------ Input and Their Fundamental Relations -------

// The Control Flow Graph tells us whether control can flow from point A to point B.
// This is better labeled the data flow graph, because it describes whether a piece
// of data's lifetime, via borrowing or scope, is "live" as any given point. The 
// points are line numbers in the program.
.init CFG = DiGraph
CFG.edge("L10","L12").
CFG.edge("L12","L14").
CFG.edge("L14","L1").
CFG.edge("L1","L2").
CFG.edge("L2","L3").
CFG.edge("L3","L4").
CFG.edge("L4","L6").
CFG.edge("L2","L4").
CFG.edge("L4","L5").
CFG.edge("L5","L6").
CFG.edge("L6","L7").
CFG.edge("L7","L15").
CFG.edge("L15","L17").
CFG.edge("L17","L18").
CFG.edge("L18","L20").

// These are inputs and are defined by either the object going out of scope
// or the object being initialized or overwritten.
.decl owner_created(ref:reference, pt:point)
// These are object owners. In real life, we would also track moves from one owner to another.
owner_created("string1", "L10").
owner_created("string2", "L14").

.decl object_born(ref:loan, pt:point)
object_born(cat(refr, "_val"), pt) :- owner_created(refr, pt).

// Just for convenience:
.decl reference_owns(ref:reference, ln:loan, at:point)
reference_owns(refr, ln, pt) :- owner_created(refr, pt), object_born(ln, pt).
// These are inputs:
.decl owner_destroyed(ref:reference, pt:point)
owner_destroyed("string1", "L20").
owner_destroyed("string2", "L17").
.decl object_dies(ln:loan, at:point)
// This would need to be adjusted for moves.
object_dies(ln, at) :- reference_owns(refr, ln, _), owner_destroyed(refr, at).


// What borrows what at which point?
.decl borrows(ref1:reference, ref2:referrer, at:point)
// Every object owner borrows from itself.
borrows(ref, ref, at) :- reference_owns(ref, _, at).
// borrows("string1", "string1_val", "L10").
// borrows("string2", "string2_val", "L14").

// This is input from AST. Each has either a corresponding `drops` line or a `borrows`
// line in which the reference gives up the loan it has borrowed. We create virtual  
// lones for temporaries/rvalues: loan_if is a virtual reference representing the 
// rvalue of the `if` statement that is eventually returned. Could have cut it out.
borrows("loan_if", "x", "L3"). // From inside longest, if x returned
borrows("loan_if", "y", "L5"). // From inside longest, if y returned
// The loan longest is a virtual reference representing the rvalue returned
// by `longest`. Could call it something else so longest isn't overloaded, but who cares.
borrows("longest", "loan_if", "L7").
borrows("result", "longest", "L15"). // Recieves loan from longest
// This is input computed from the call site:
borrows("x", "string1", "L1").
borrows("y", "string2", "L1").

// The object either goes out of scope, is assigned to, or otherwise cannot hold
// its previous borrow any more. The reference `dropping` is dropping it's value at 
// location `at`.
.decl drops(dropping:reference, dropped:referrer, at:point)
// An object drops its own "loan" when it dies.
drops(dropping, dropping, at) :- object_dies(_, at), owner_destroyed(dropping, at).
// drops("string1", "string1_val", at) :- object_dies("string1_val", at).
// drops("string2", "string2_val", at) :- object_dies("string2_val", at).

// An object drops its loan when it is borrowed from. This is the semantics for 
// mutable borrows, but it's the more interesting case, so we do this to show how
// it would go.
// ToDo: This... doesn't feel right.
drops(ref1, ref2, at) :-
        borrows(ref1, ref2, _),
        borrows(_, ref1, at),
        ref1!=ref2. // Exclude self borrowing.

// This is input computed from borrows and references leaving scope.
// Note that we already have a rule built in that says a reference
// drops its borrow if another reference borrows from it.
drops("x", "string1", "L3"). // From inside longest, if x returned
drops("x", "string1", "L7"). // From inside longest, if y returned
drops("y", "string2", "L5"). // From inside longest, if y returned
drops("y", "string2", "L7"). // From inside longest, if x returned
drops("result", "longest", "L18"). // println borrows result

// ------ Data Flow Graph -------

// Variable var is borrowing loan ln at point p.
.decl borrowing(ref:reference, ref2:reference, p:point)
// borrowing(ref, ref, pt) :- reference_owns(ref, _, pt). // bootstrap
borrowing(refr, ref2, p) :- borrows(refr, ref2, p).
// Then propogate to next statement.
borrowing(refr, ref2, p2) :- CFG.edge(p1, p2),
                        borrowing(refr, ref2, p1),
                        !drops(refr, ref2, p1).

// Conceptually, if var borrows ln and ln is a reference, then we need the set
// of all p such that borrowing(var, ln, p) to be a subset of the set of all p
// such that borrowing(ln, _, p). In other words, the lifetime of var's borrow 
// must be a subset of the lifetime of ln's borrow.

.decl references(var:reference, ln:loan, pt:point)
references(ref, ln, pt) :- reference_owns(ref, ln, pt). // bootstrap
// Propogate to the next statement.
references(var, ln, current) :- CFG.edge(pred, current),
                        borrowing(var, ref, pred),
                        references(var, ln, pred),
                        borrowing(var, ref, current).
// Propogate across a borrow.
references(ref1, ln, current) :- CFG.edge(pred, current),
                        borrows(ref1, ref0, pred),
                        references(ref0, ln, pred),
                        borrowing(ref1, ref0, current).

// ------ Error Detection -------

// A dangling pointer occurs when an object dies while something is still 
// referencing it. From the conceptual perspective of sets, an error occurs
// when we find a point p, a reference ref1, and a loan ref2 such that
// borrowing(ref1, ref2, p) but NOT borrowing(ref2, ln, p) for some loan.
// In symbols, $S1 \subset S2$ is a constraint, but $p\in S1\setminus S2$.
// To be fancy, we also compute the point at which the
// reference first borrows the object.
// ln dies at pt, but var still holds the loan it borrowed at borpt.
.decl error_use_freed(var: reference, ln:loan, errpt:point, ref1:reference, borpt:point) 
error_use_freed(ref2, ln, errpt, ref1, borpt) :- 
                        CFG.edge(prevpt, errpt),
                        object_dies(ln, prevpt),
                        references(ref2, ln, errpt), 
                        references(ref1, ln, borpt),
                        borrows(ref2, ref1, borpt).

// It is also an error to have distinct references reference the same object.
// Again, we're fancy and compute the reference already pointing to the object
// and where that reference borrowed from the object.
// I don't actually make a distinction between mutable borrows and immutable
// borrows, so this error isn't true to life. It is just to show how it would
// work.
// ref1 tries to borrow ln at errpt, but ref2 has already borrowed ln at borpt.
.decl error_already_borrowed(ref1:reference, ln:loan, errpt:point, ref3:reference,
                                ref2:reference, borpt:point)
error_already_borrowed(ref1, ln, errpt, ref3, ref2, borpt) :- 
                                references(ref1, ln, errpt),
                                borrows(ref1, ref3, errpt),
                                references(ref2, ln, errpt), ref2!=ref1,
                                borrows(ref2, ref3, borpt), ref2!=ref3,
                                references(ref2, ln, borpt).

.type String
.decl error_msg(msg:String)
error_msg( cat("Error: '", ref1, "' tries to borrow '", ln, "' from '", ref3, "' at ", 
            errpt, ", but '",  ref2, "' still holds the loan it borrowed at ", 
            borpt, ".")) :- error_already_borrowed(ref1, ln, errpt, ref3, ref2, borpt).
error_msg( cat("Error: '", ln, "' is dropped at ", errpt, ", but '", ref2, 
            "' still holds a reference to it, which it borrowed from '", ref1, 
            "' at ", borpt, ".")) :- error_use_freed(ref2, ln, errpt, ref1, borpt).

// .output drops
// .output borrows
// .output borrowing
// .output object_dies
// .output error_use_freed
// .output error_already_borrowed
.output error_msg